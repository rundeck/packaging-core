version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.0.0
  docker-publish: circleci/docker-publish@0.1.6
  node: circleci/node@1.1.6
  trigger: rundeck/trigger-pipeline@0.0.5

parameters:
  CIRCLE_UPSTREAM_PIPELINE_NUMBER: {type: string, default: ""}
  CIRCLE_UPSTREAM_BRANCH: {type: string, default: ""}
  CIRCLE_UPSTREAM_TAG: {type: string, default: ""}

upstream-env: &upstream
  CIRCLE_UPSTREAM_PIPELINE_NUMBER: <<pipeline.parameters.CIRCLE_UPSTREAM_PIPELINE_NUMBER>>
  CIRCLE_UPSTREAM_BRANCH: <<pipeline.parameters.CIRCLE_UPSTREAM_BRANCH>>
  CIRCLE_UPSTREAM_TAG: <<pipeline.parameters.CIRCLE_UPSTREAM_TAG>>

defaults: &defaults
  working_directory: ~/repo
  environment:
    CIRCLE_PIPELINE_NUM: << pipeline.number >>
    TERM: dumb

commands:
  install-packages:
    description: Install apt packages
    steps:
      - run:
          name: Apt install
          command: |
            sudo apt-get update
            sudo apt-get -y install expect
            sudo apt-get -y install rpm
            sudo apt-get -y install dpkg-sig
            sudo apt-get -y install gnupg
  docker-login:
    description: Login to docker
    steps:
      - run:
          name: Login to docker
          command: docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
  git-modules:
    description: Git modules step
    steps:
      - checkout
      - run:
          name: Git modules
          command: |
            sudo sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules

  submodule-update:
    description: Update submodule
    steps:
      - run:
          name: Update submodule
          command: git submodule update --init --recursive --remote
  aws-install:
    description: Install aws cli
    steps:
      - run:
          name: Install aws cli
          command: pip install awscli --upgrade --user

  package-cloud-install:
    description: Install package cloud
    steps:
      - run:
          name: Install package cloud
          command: gem install package_cloud

  echo-package-cloud:
    description: Echo Package cloud token
    steps:
      - run:
          name: Echo Package cloud token
          command: echo "{\"url\":\"https://packagecloud.io\",\"token\":\"${PKGCLD_WRITE_TOKEN}\"}" > ~/.packagecloud

  define-source:
    description: Define helpers source
    steps:
      - run:
          name: Define helpers source
          command: source packaging/scripts/travis-helpers.sh
  export-helpers:
    description: Export helpers
    steps:
      - run:
          name: Export helpers
          command: |
              source packaging/scripts/travis-helpers.sh
              export -f travis_nanoseconds
              export -f travis_fold
              export -f travis_time_start
              export -f travis_time_finish
  build:
    description: Build war
    steps:
      - run:
          name: Build war
          command: |
            source .circleci/travis-shim.sh 
            export CIRCLE_UPSTREAM_TAG="v3.4.5-alpha1"
            export UPSTREAM_TAG="v3.4.5-alpha1"
            bash scripts/travis-build.sh build
  sign:
    description: Sign war
    steps:
      - run:
          name: Sign war
          command: |
            source .circleci/travis-shim.sh
            bash scripts/travis-build.sh sign
  test:
    description: Test war
    steps:
      - run:
          name: Test war
          command: |
            source .circleci/travis-shim.sh
            bash scripts/travis-build.sh test
  publish:
    description: Publish
    steps:
      - run:
          name: Publish
          command: |
            source .circleci/travis-shim.sh
            bash scripts/travis-build.sh publish
  publish_war:
    description: Publish war
    steps:
      - run:
          name: Publish war
          command: |
            source .circleci/travis-shim.sh
            bash scripts/travis-build.sh publish_war

jobs:
  random_test:
    machine: true
    steps:
      - run:
          name: Test
          command: echo "hello world"

  build_and_publish:
    <<: *defaults
    machine: true
    resource_class: large

    parameters:
      submodule:
        description: Should the build use submodules?
        type: boolean
        default: true

    steps:
      - run:
          name: Apt install
          command: |
            sudo apt-get update
            sudo apt-get -y install expect
            sudo apt-get -y install rpm
            sudo apt-get -y install dpkg-sig
            sudo apt-get -y install gnupg
      - docker-login
      - git-modules
      - submodule-update
      - aws-install
      - package-cloud-install
      - echo-package-cloud
      - define-source
      #- export-helpers
      - build
      - sign
      - test
      - publish
      - publish_war

stages:
  test: &stage-test
    - Test

filters:
  all: &filter-default
    filters:
      tags: {only: '/^v.*/'}
  tags: &filter-tags
    filters:
      branches: {ignore: /.*/}
      tags: {only: '/^v.*/'}

workflows:
  version: 2
  build_and_test:
    when:
      and:
        - equal ['/^v.*/', <<pipeline.parameters.CIRCLE_UPSTREAM_TAG>>]
    jobs:
      - build_and_publish:
          name: Build and publish
      - random_test:
          name: Test